//***test declarations***
int intx;
bool flag;

struct _st{
	int stmemint;
	bool stmembool;
};

struct _st1 { 	
	int st1memint;
	bool st1membool;
	struct _st st;
};

struct _st2{
	int st2memint;
	bool st2membool;
	struct _st1 st1;
};
	
struct _st2 st2;

int function(int para, bool para2){
	int local;
	bool flag;
	int term;
	cout <<	"test decls";
	intx = 1;
	flag = true;
	para = local + term;
	para = local - term;
	para = local * term;
	para = local / term;
	para = !local;
	para = local && term;
	para = local || term;
	flag = local == term;
	flag = local != term;
	flag = local >  term;
	flag = local <  term;
	flag = local >= term;
	flag = local <= term;
	para = -local;
	para = -local + term;
	para = local - -local /term;
	para = local = term;
	para = local = local = term;
	para = local-local*local/local+local;
	para = local =  local + local *local / local -local;
	local++;
	term --;
	st2.st1.st.stmemint = 0;
	st2.st1.st.stmembool = true;
	st2.st2memint =0;
	st2.st1.st1membool = false;

	if(para == local) {}

	if(true){
		int tstIfDecl;
		int tstIfDecl1;
		tstIfDecl = tstIfDecl1;
	}
	if(false){
		int testIfDecl;
		bool tstIfDeclBool;
	}
	if(local < term){
		bool tstIfElseDecl;
		para = local || term;
	} else {
		bool tstIfElseDecl;
		para = local || term;
	}
		
	while(local >term){
	}
	
	while(local <= term){
		int tstWhileDecl;
		bool tstWhileDeclBool;
		cin >> term;
		cout << "Hello Kitty";
	}

	while(true){}
	while(false){
		int tstRecursive;
		while(true){
			cout << "second level";
			if(true){
				term++;
				cout <<  "should be stmts";
				local = term;
			}
		}	
	}
	
	cout << "test return";
	return term+local;
	return ;
}

int fnRec(int para1, bool para2){
	function(para1, para1);
}

bool fnBool(bool paraB){
	paraB = false;
	return paraB;
}

void fnVoid(){
}

void tstOtherFunction(){
	intx = fnVoid();
	intx = function(intx, intx);
	if(true){
		fnVoid();
		intx = function(intx, intx);
		while(true){
			fnVoid();
		}
	}
}

void tstMulFuncParams(int param1, bool param2, int param3, int param4){
	//do nothing
}